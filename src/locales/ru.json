{
  "header": {
    "about": "О задании",
    "title": "Тестовое задание для SquareGPS",
    "map": "Карта"
  },
  "map": {
    "marker": "Маркер №",
    "location": "Мое местоположение",
    "delete": "Удалить все метки",
    "addMode": "Режим добавления метки, выберите точку на карте",
    "deleteError": "Ошибка при удалении метки",
    "deleteAllError": "Ошибка при удалении всех меток",
    "adding": "Добавление новой метки на карту",
    "addressNotFound": "Адрес не найден",
    "detectingLocation": "Определение местоположения",
    "geoPositionError": "Не удалось получить геопозицию",
    "geoBrowserError": "Геолокация не поддерживается вашим браузером",
    "geoIPError": "Не удалось определить геопизицию по IP адресу"
  },
  "about": {
    "title": "О задании",
    "intro": "Необходимо с помощью Vuejs, Vuex, VueRouter, Vuetify написать приложение. Хэдер приложения должен содержать меню из 2-х пунктов: О задании и Карта. В основной части приложения должно отображаться содержимое разделов.",
    "sectionTitleAbout": "Раздел “О задании”",
    "sectionContentAbout": "В разделе должен быть текст этого задания, сверстанный аналогично.",
    "sectionTitleMap": "Раздел “Карта”",
    "sectionContentMap": "На экране должны быть карта и список (см. пример):",
    "list": {
      "item1": "При клике на кнопку добавления, карта должна перейти в режим добавления маркера: в месте клика должен появится маркер, а в списке - запись с адресом точки.",
      "item1Details": {
        "a": "Для поиска адреса можно использовать любое бесплатное API для геокодирования, например: ",
        "b": "В случае, если адрес не найден, необходимо вывести ошибку и не добавлять маркер в список."
      },
      "item2": "При клике на маркер должна подсвечиваться запись в списке.",
      "item3": "При клике на запись в списке карта должна центрироваться на маркере.",
      "item4": "Маркеры должны храниться локально и не пропадать после перезагрузки страницы.",
      "item5": "В адресной строке должен отображаться id выбранного маркера."
    },
    "storageNote": "Локальное хранение данных должно быть организовано в виде сервиса, эмулирующего бекенд. (Необходим класс Backend, который псевдо-асинхронно сохраняет данные в localStorage.)",
    "exampleTitle": "Пример"
  }
}
